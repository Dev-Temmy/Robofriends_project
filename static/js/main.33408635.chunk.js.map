{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","ErrorBoundary.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2OAkBeA,EAhBF,SAACC,GACd,OACA,sBAAKC,UAAY,qDAAjB,UACA,qBAAKA,UAAY,QAAQC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,OACzC,gCACA,mCAAMJ,EAAMK,QACZ,kCAAKL,EAAMM,gBCqBIC,EA1BC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACd,OACA,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACQ,cAAC,EAAD,CAEAP,GAAKI,EAAOG,GAAGP,GACfC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,OAHVK,SCKhBC,EAbE,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACA,qBAAKb,UAAU,MAAf,SACA,uBACAA,UAAU,mCACVc,KAAM,SACNC,YAAc,gBACdC,SAAUH,OCeCI,G,gEApBf,WAAalB,GAAQ,IAAD,8BAChB,cAAMA,IACDmB,MAAQ,CACTC,UAAS,GAHG,E,8DAQFC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACP,4DAEAG,KAAKvB,MAAMyB,a,GAjBMC,cC+CbC,E,kDAzCX,aAAe,IAAD,8BACV,gBAcRC,eAAgB,SAACC,GACb,EAAKL,SAAS,CAACX,YAAagB,EAAMC,OAAOC,SAdrC,EAAKZ,MAAQ,CACTX,OAAQ,GACRK,YAAa,IAJP,E,gEAQM,IAAD,OACfmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACN,EAAKZ,SAAS,CAAChB,OAAQ4B,S,+BAOrB,IAAD,OACCC,EAAiBd,KAAKJ,MAAMX,OAAO8B,QAAO,SAAA9B,GAChD,OAAOA,EAAOH,KAAKkC,cAAcC,SAAS,EAAKrB,MAAMN,YAAY0B,kBAErE,OAAiC,IAA7BhB,KAAKJ,MAAMX,OAAOiC,OACf,yCAGH,sBAAKxC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWa,aAAeS,KAAKK,iBAC/B,qBAAK3B,UAAW,+CAAhB,SACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAUO,OAAU6B,e,GAjCVX,aCIHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCIdO,IAASC,OACP,8BACA,cAAC,EAAD,MAYFC,SAASC,eAAe,SAOxBX,M","file":"static/js/main.33408635.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props)=> {\r\nreturn (\r\n<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 }'>\r\n<img className = 'w-100' alt='robots' src={`https://robohash.org/${props.id}?`} />\r\n<div>\r\n<h2> {props.name}</h2>\r\n<p> {props.email}</p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots})=> {\r\n    return(\r\n    <div>\r\n        {\r\n            robots.map((user, i) => {\r\n                return (\r\n                        <Card\r\n                        key = {i} \r\n                        id ={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                        /> \r\n                    );\r\n                }) \r\n            }\r\n</div>\r\n// <Card id ={robots[1].id} name={robots[1].name} email={robots[1].email}/> \r\n// <Card id ={robots[2].id} name={robots[2].name} email={robots[2].email}/> \r\n// <Card id ={robots[3].id} name={robots[3].name} email={robots[3].email}/> \r\n// <Card id ={robots[4].id} name={robots[4].name} email={robots[4].email}/> \r\n// <Card id ={robots[5].id} name={robots[5].name} email={robots[5].email}/> \r\n\r\n);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield, searchChange})=> {\r\n    return (\r\n    <div className='pa2'>\r\n    <input \r\n    className='pa3 ba b--green bg-lightest-blue'\r\n    type= 'search' \r\n    placeholder = 'search robots'\r\n    onChange={searchChange}\r\n    /> \r\n    </div>\r\n    );\r\n\r\n}\r\nexport default SearchBox;","import { render } from '@testing-library/react';\r\nimport React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\nconstructor (props) {\r\n    super(props);\r\n    this.state = {\r\n        hasError:false\r\n    }\r\n}\r\n\r\n\r\ncomponentDidCatch(error, info) {\r\n    this.setState({hasError: true});\r\n}\r\n\r\nrender() {\r\n    if(this.state.hasError){\r\n    return <h1> Oooooop! That is not good</h1>\r\n    }\r\n    return this.props.children;   \r\n}\r\n\r\n}\r\nexport default ErrorBoundary;","import React, {Component} from 'react'; \r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\n//import Scroll from '..components/Scroll';\r\n//import {robots} from './robots';\r\nimport './App.css';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nclass App extends Component { //constructor function to create state\r\n    constructor() {\r\n        super()\r\n        this.state = { //describes the App\r\n            robots: [], //this robot will likely be empty array in practice as it will be cumbersome to list all\r\n            searchfield: '' //we can type any robot we are looking for here\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => {\r\n        this.setState({robots: users})  //if this is empty, Loading will appear on the page  \r\n        })         \r\n    }\r\nonSearchChange =(event)=>{ //through searchChange we can control SearchBox\r\n    this.setState({searchfield: event.target.value}) //update the searchfield with whatever we typed\r\n}\r\n\r\nrender() {\r\n    const filteredRobots = this.state.robots.filter(robots =>{\r\n    return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\nif (this.state.robots.length === 0){\r\nreturn <h1>Loading</h1>\r\n} else {\r\nreturn (\r\n    <div className='tc'>\r\n        <h1 className='f1'> RobotFriends</h1>\r\n        <SearchBox searchChange= {this.onSearchChange}/>\r\n        <div className= 'overflow-y-scroll-ns { overflow-y: scroll; }'>\r\n        <ErrorBoundary>\r\n        <CardList robots = {filteredRobots} />\r\n        </ErrorBoundary>\r\n        </div>    \r\n    </div>\r\n    );\r\n}\r\n}\r\n}\r\n\r\nexport default App;\r\n\r\n/*  <Scroll>\r\n    <CardList robots = {filteredRobots}/>\r\n         </Scroll>           \r\n         */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import CardList from './CardList';\n//import Card from './Card.js';\n\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n//import {robots} from './robots.js';\n\nReactDOM.render(\n  <div>\n  <App/>\n\n</div>,\n// <Card id ={robots[0].id} name={robots[0].name} email={robots[0].email}/> \n// <Card id ={robots[1].id} name={robots[1].name} email={robots[1].email}/> \n// <Card id ={robots[2].id} name={robots[2].name} email={robots[2].email}/> \n// <Card id ={robots[3].id} name={robots[3].name} email={robots[3].email}/> \n// <Card id ={robots[4].id} name={robots[4].name} email={robots[4].email}/> \n// <Card id ={robots[5].id} name={robots[5].name} email={robots[5].email}/>   <CardList robots= {robots}/>\n\n//instead of copying and pasting several components we can import card  and create cardlist file\n  //</cardlist>,\ndocument.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}